#include <iostream>
#include <fstream>
using namespace std;



const int max_produtos = 100; // vari√°vel global para om√°ximo de produtos

struct Produto{     // estrutura de um produto
    int ID;
    string nome;
    float preco;
    int quantidade;
    char status;
};


void ficheiros(Produto produtos[], int& quantidadeAtual){
    string escolha;
    cout << "‚ùô‚≠ê‚ùô Queres criar um ficheiro com todos os produtos registados? ‚ùô‚≠ê‚ùô" << endl;
    cout << "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" << endl;
    cout << "Pressione 'Enter' para continuar ‚û§" << endl;
    cin.ignore();
    getline(cin, escolha);
    ofstream ficheiro("produtos.csv");
    if (ficheiro.is_open()) {
        for (int x = 0; x < quantidadeAtual; x++) {
            ficheiro << produtos[x].ID << ",";  
            ficheiro << produtos[x].quantidade << ",";
            ficheiro << produtos[x].nome << ",";
            ficheiro << produtos[x].preco << ",";
            ficheiro << produtos[x].status;
            ficheiro << endl; 
        }
        ficheiro.close();
        system("clear");
        cout << "O ficheiro foi criado com sucesso! ‚úî" << endl;
    }
}


void adicionarProduto(Produto produtos[], int& quantidadeAtual){     // fun√ß√£o para adicionar um produto
    string ativo;
    if (quantidadeAtual < max_produtos )
    {
        produtos[quantidadeAtual].ID = quantidadeAtual + 1;
        cout << "Qual a quantidade do produto? ";
        cin >>  produtos[quantidadeAtual].quantidade;
        cout << "Qual o nome do produto? ";
        cin.ignore();
        getline(cin, produtos[quantidadeAtual].nome);
        cout << "Qual o preco do produto? ";   // se o limite ainda n√£o foi atingido este bloco de codigo ser√° executado
        cin >> produtos[quantidadeAtual].preco;
        produtos[quantidadeAtual].status = 'A';
        // cout << "Qual o status do produto? " << endl;
        // cout << "A - Active" << endl;
        // cout << "D - Deleted" << endl;
        // cin >> ativo;
        // if(ativo !=  "D", "d"){
        // }

        quantidadeAtual++;
        system("clear");
        cout << "Produto adicionado com sucesso! " << endl;

    }else{
        
        cout << "Atingiste o limite m√°ximo de produtos!" << endl;   //caso o limite tenha sido atingido aparecer√° este mensagem

    }
    
}


void alterar_produto(Produto produtos[], int& quantidadeAtual) {
    int idAlterar;
    cout << "Digite o ID do produto que deseja alterar: ";
    cin >> idAlterar;

    for (int i = 0; i < quantidadeAtual; i++) {
        if (produtos[i].ID == idAlterar) {
            cout << "Digite o novo nome do produto: ";
            cin >> produtos[i].nome;
            cout << "Digite o novo preco do produto: ";
            cin >> produtos[i].preco;
            cout << "Produto alterado com sucesso!" << endl;
            return; // Sai da fun√ß√£o ap√≥s alterar o produto
        }
    }
    cout << "Produto n√£o encontrado!" << endl;
}

void eliminar_produto(Produto produtos[], int& quantidadeAtual) {
    int idEliminar;
    cout << "ID do produto que queres eliminar: ";
    cin >> idEliminar;

    for (int i = 0; i < quantidadeAtual; i++) {
        if (produtos[i].ID == idEliminar) {
            // isto t√° a alterar o status do produto para D
            produtos[i].status = 'D';
            cout << "Produto definido como eliminado!" << endl;
            return; 
        }
    }
    
    cout << "Produto n√£o encontrado!" << endl;
}




void exibirProdutos(const Produto produtos[], int quantidadeAtual){

    for (int i = 0; i < quantidadeAtual; i++){                                            //fun√ß√£o para exibir os produtos criados
        cout << "ID do produto: " << produtos[i].ID << endl;
        cout << "Nome do produto: " << produtos[i].nome << endl;
        cout << "Preco do produto: " << produtos[i].preco << endl;
        cout << "Quantidade do produto: " << produtos[i].quantidade << endl;
        cout << "Status do produto: " << produtos[i].status << endl;
    }

}

float calcularValorTotal(Produto produto[], int quantidadeAtual) {
    float valorTotal = 0.0;
    for (int a = 0; a < quantidadeAtual; a++){                                      //fun√ß√£o para calcular o valor total dos produtos em stock
        valorTotal += produto[a].quantidade;
    }
    return valorTotal;                                                      //retorna o valorTotal por ser um float
}

int main() {
    system("clear");
    int quantidadeAtual = 0;
    Produto max_Produtos[100];
    // Produto produto;
    int escolhas;

    do{
        
        cout << "‚ïì‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïñ" << endl;
        cout << "‚ïë            Menu üè∑Ô∏è           ‚ïë" << endl;
        cout << "‚ïô‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïú" << endl;
        cout << "ùüè ‚û£ Adicionar um produto" << endl;
        cout << "ùüê ‚û£ Exibir todos os produtos" << endl;
        cout << "ùüë ‚û£ Calcula e exibe o valor total de stock" << endl;
        cout << "ùüí ‚û£ Criar ficheiro com todos os produtos" << endl;
        cout << "ùüì ‚û£ Alterar um produto" << endl;
        cout << "ùüî ‚û£ Eliminar um produto" << endl;
        cout << "ùüï ‚û£ Sair üö™" << endl;
        cin >> escolhas;
        
        switch (escolhas) {
                case 1:
                    system("clear");
                    adicionarProduto(max_Produtos, quantidadeAtual); 
                    // main();
                    break;
                case 2:
                    system("clear");
                    exibirProdutos(max_Produtos, quantidadeAtual);
                    // main();
                    break;
                case 3:
                    system("clear");
                    cout << "Valor total em stock: " << calcularValorTotal(max_Produtos, quantidadeAtual) << endl;
                    // main();
                    break;
                case 4:
                    system("clear");
                    ficheiros(max_Produtos, quantidadeAtual);
                    // main();
                    break;
                case 5:
                    system("clear");
                    alterar_produto(max_Produtos, quantidadeAtual);
                    // main();   
                    break;
                case 6:
                    system("clear");
                    eliminar_produto(max_Produtos, quantidadeAtual);
                    // main();  
                    break;
                case 7:
                    cout << "A sair..." << endl;
                    break;
                default:
                    cout << "Escolha errada, tente novamente!" << endl;
                    break;
        }
    
    }while (escolhas != 7);
        
    return 0;
}
